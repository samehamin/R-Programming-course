if (length(desired_hospitals) > 1) {
hospitals_sorted <- sort(desired_hospitals)
hospitals_sorted[1]
}else {
desired_hospitals
}
source(best.R)
setwd("~/SourceCode/R-Programming-course/Week4/rprog_data_ProgAssignment3-data")
source(best.R)
source("best.R")
best("TX", "heart attack")
best("TX", "heart attack")
best("BB", "heart attack")
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states <- unique(data[ , 7])
outcomes <- c("heart attack", "heart failure", "pneumonia")
if ((state %in% states) == FALSE) {
stop(print("invalid state"))
} else if ((outcome %in% outcomes) == FALSE) {
stop(print("invalid outcome"))
}
## Return hospital name in that state with lowest 30-day death
#get the subset of the data with the desired state
new_data <- subset(data, State == state)
#get the desired outcome column from the data file
if (outcome == "heart attack") {
outcome_column <- 11
}else if (outcome == "heart failure") {
outcome_column <- 17
}else {
outcome_column <- 23
}
# clean NAs values
required_columns <- as.numeric(new_data[,outcome_column])
bad <- is.na(required_columns)
desired_data <- new_data[!bad, ]
##find the hospitals in the rows with the minimum outcome value
columns_considered <- as.numeric(desired_data[, outcome_column])
desired_rows <- which(columns_considered == min(columns_considered))
desired_hospitals <- desired_data[desired_rows, 2]
## return the first hospital with duplicates
if (length(desired_hospitals) > 1) {
hospitals_sorted <- sort(desired_hospitals)
hospitals_sorted[1]
}else {
desired_hospitals
}
}
best("BB", "heart attack")
best("NY", "hert attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
head(texas)
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states <- unique(data[ , 7])
outcomes <- c("heart attack", "heart failure", "pneumonia")
if ((state %in% states) == FALSE) {
stop(print("invalid state"))
} else if ((outcome %in% outcomes) == FALSE) {
stop(print("invalid outcome"))
}
new_data <- subset(data, State == state)
View(new_data)
# return NA if exceed the number of hospitals in state
if (is.numeric(num) == TRUE) {
if (length(new_data[,2]) < num) {
return(NA)
}
}
num = 5
# return NA if exceed the number of hospitals in state
if (is.numeric(num) == TRUE) {
if (length(new_data[,2]) < num) {
return(NA)
}
}
#get the desired outcome column from the data file
if (outcome == "heart attack") {
outcome_column <- 11
}else if (outcome == "heart failure") {
outcome_column <- 17
}else {
outcome_column <- 23
}
required_columns <- as.numeric(new_data[,outcome_column])
bad <- is.na(required_columns)
desired_data <- new_data[!bad, ]
View(desired_data)
outcome_column_name <- names(desired_data)[outcome_column]
hospital_column_name <- names(desired_data)[2]
index <- with(desired_data, order(desired_data[outcome_column],
desired_data[hospital_column_name]))
ordered_desired_data <- desired_data[index, ]
View(ordered_desired_data)
View(ordered_desired_data)
index
order(desired_data[outcome_column],
desired_data[hospital_column_name])
outcome_column_name <- names(desired_data)[outcome_column]
hospital_column_name <- names(desired_data)[2]
index <- with(desired_data, order(desired_data[outcome_column],
desired_data[hospital_column_name]))
ordered_desired_data <- desired_data[index, ]
View(ordered_desired_data)
View(ordered_desired_data)
if (is.character(num) == TRUE) {
if (num == "best") {
num = 1
}else if (num == "worst") {
num = length(ordered_desired_data[, outcome_column])
}
}
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states <- unique(data[ , 7])
outcomes <- c("heart attack", "heart failure", "pneumonia")
## Validate params
if ((state %in% states) == FALSE) {
stop(print("invalid state"))
} else if ((outcome %in% outcomes) == FALSE) {
stop(print("invalid outcome"))
}
## Return hospital name in that state with lowest 30-day death
#get the subset of the data with the desired state
new_data <- subset(data, State == state)
# return NA if exceed the number of hospitals in state
if (is.numeric(num) == TRUE) {
if (length(new_data[,2]) < num) {
return(NA)
}
}
#get the desired outcome column from the data file
if (outcome == "heart attack") {
outcome_column <- 11
}else if (outcome == "heart failure") {
outcome_column <- 17
}else {
outcome_column <- 23
}
# clean NAs values
required_columns <- as.numeric(new_data[,outcome_column])
bad <- is.na(required_columns)
desired_data <- new_data[!bad, ]
## arrange by outcome and hospital
outcome_column_name <- names(desired_data)[outcome_column]
hospital_column_name <- names(desired_data)[2]
index <- with(desired_data, order(desired_data[outcome_column],
desired_data[hospital_column_name]))
ordered_desired_data <- desired_data[index, ]
}
num = 5
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states <- unique(data[ , 7])
outcomes <- c("heart attack", "heart failure", "pneumonia")
## Validate params
if ((state %in% states) == FALSE) {
stop(print("invalid state"))
} else if ((outcome %in% outcomes) == FALSE) {
stop(print("invalid outcome"))
}
## Return hospital name in that state with lowest 30-day death
#get the subset of the data with the desired state
new_data <- subset(data, State == state)
# return NA if exceed the number of hospitals in state
if (is.numeric(num) == TRUE) {
if (length(new_data[,2]) < num) {
return(NA)
}
}
#get the desired outcome column from the data file
if (outcome == "heart attack") {
outcome_column <- 11
}else if (outcome == "heart failure") {
outcome_column <- 17
}else {
outcome_column <- 23
}
# clean NAs values
required_columns <- as.numeric(new_data[,outcome_column])
bad <- is.na(required_columns)
desired_data <- new_data[!bad, ]
## arrange by outcome and hospital
outcome_column_name <- names(desired_data)[outcome_column]
hospital_column_name <- names(desired_data)[2]
index <- with(desired_data, order(desired_data[outcome_column],
desired_data[hospital_column_name]))
ordered_desired_data <- desired_data[index, ]
#convert "best" or "worst", to numeric values
if (is.character(num) == TRUE) {
if (num == "best") {
num = 1
}else if (num == "worst") {
num = length(ordered_desired_data[, outcome_column])
}
}
## rate
ordered_desired_data[num, 2]
rankhospital <- function(state, outcome, num = "best") {
## read data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states <- unique(data[ , 7])
outcomes <- c("heart attack", "heart failure", "pneumonia")
## Validate params
if ((state %in% states) == FALSE) {
stop(print("invalid state"))
} else if ((outcome %in% outcomes) == FALSE) {
stop(print("invalid outcome"))
}
## Return hospital name in that state with lowest 30-day death
#get the subset of the data with the desired state
new_data <- subset(data, State == state)
# return NA if exceed the number of hospitals in state
if (is.numeric(num) == TRUE) {
if (length(new_data[,2]) < num) {
return(NA)
}
}
#get the desired outcome column from the data file
if (outcome == "heart attack") {
outcome_column <- 11
}else if (outcome == "heart failure") {
outcome_column <- 17
}else {
outcome_column <- 23
}
# clean NAs values
required_columns <- as.numeric(new_data[,outcome_column])
bad <- is.na(required_columns)
desired_data <- new_data[!bad, ]
## arrange by outcome and hospital
outcome_column_name <- names(desired_data)[outcome_column]
hospital_column_name <- names(desired_data)[2]
index <- with(desired_data, order(desired_data[outcome_column],
desired_data[hospital_column_name]))
ordered_desired_data <- desired_data[index, ]
#convert "best" or "worst", to numeric values
if (is.character(num) == TRUE) {
if (num == "best") {
num = 1
}else if (num == "worst") {
num = length(ordered_desired_data[, outcome_column])
}
}
## rate
ordered_desired_data[num, 2]
}
> source("rankhospital.R")
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("TX", "pneumonia", 10)
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states <- unique(data[ , 7])
outcomes <- c("heart attack", "heart failure", "pneumonia")
state = "TX"
outcome = "pneumonia"
num = 10
## read data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states <- unique(data[ , 7])
outcomes <- c("heart attack", "heart failure", "pneumonia")
## Validate params
if ((state %in% states) == FALSE) {
stop(print("invalid state"))
} else if ((outcome %in% outcomes) == FALSE) {
stop(print("invalid outcome"))
}
## Return hospital name in that state with lowest 30-day death
#get the subset of the data with the desired state
new_data <- subset(data, State == state)
# return NA if exceed the number of hospitals in state
if (is.numeric(num) == TRUE) {
if (length(new_data[,2]) < num) {
return(NA)
}
}
#get the desired outcome column from the data file
if (outcome == "heart attack") {
outcome_column <- 11
}else if (outcome == "heart failure") {
outcome_column <- 17
}else {
outcome_column <- 23
}
# clean NAs values
required_columns <- as.numeric(new_data[,outcome_column])
bad <- is.na(required_columns)
desired_data <- new_data[!bad, ]
## arrange by outcome and hospital
outcome_column_name <- names(desired_data)[outcome_column]
hospital_column_name <- names(desired_data)[2]
index <- with(desired_data, order(desired_data[outcome_column],
desired_data[hospital_column_name]))
ordered_desired_data <- desired_data[index, ]
#convert "best" or "worst", to numeric values
if (is.character(num) == TRUE) {
if (num == "best") {
num = 1
}else if (num == "worst") {
num = length(ordered_desired_data[, outcome_column])
}
}
## rate
ordered_desired_data[num, 2]
View(ordered_desired_data)
View(ordered_desired_data)
rankhospital("NY", "heart attack", 7)
rankhospital <- function(state, outcome, num = "best") {
#state = "TX"
#outcome = "pneumonia"
#num = 10
## read data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states <- unique(data[ , 7])
outcomes <- c("heart attack", "heart failure", "pneumonia")
## Validate params
if ((state %in% states) == FALSE) {
stop(print("invalid state"))
} else if ((outcome %in% outcomes) == FALSE) {
stop(print("invalid outcome"))
}
## Return hospital name in that state with lowest 30-day death
#get the subset of the data with the desired state
new_data <- subset(data, State == state)
# return NA if exceed the number of hospitals in state
if (is.numeric(num) == TRUE) {
if (length(new_data[,2]) < num) {
return(NA)
}
}
#get the desired outcome column from the data file
if (outcome == "heart attack") {
outcome_column <- 11
}else if (outcome == "heart failure") {
outcome_column <- 17
}else {
outcome_column <- 23
}
# clean NAs values
required_columns <- as.numeric(new_data[,outcome_column])
bad <- is.na(required_columns)
desired_data <- new_data[!bad, ]
## arrange by outcome and hospital
outcome_column_name <- names(desired_data)[outcome_column]
hospital_column_name <- names(desired_data)[2]
index <- with(desired_data, order(desired_data[outcome_column],
desired_data[hospital_column_name]))
ordered_desired_data <- desired_data[index, ]
#convert "best" or "worst", to numeric values
if (is.character(num) == TRUE) {
if (num == "best") {
num = 1
}else if (num == "worst") {
num = length(ordered_desired_data[, outcome_column])
}
}
## rate
ordered_desired_data[num, 2]
}
rankhospital("NY", "heart attack", 7)
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states <- unique(data[ , 7])
outcomes <- c("heart attack", "heart failure", "pneumonia")
## Validate params
if ((state %in% states) == FALSE) {
stop(print("invalid state"))
} else if ((outcome %in% outcomes) == FALSE) {
stop(print("invalid outcome"))
}
rankall <- function(outcome, num = "best") {
#state = "TX"
#outcome = "pneumonia"
#num = 10
## read data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome are valid
outcomes <- c("heart attack", "heart failure", "pneumonia")
## For each state, find the hospital of the given rank
state <- levels(factor(data[, 7]))
hospital <- vector(mode="character")
for (i in seq(state)) {
hospital[i] <- rankhospital(state[i], outcome, num)
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
data.frame(hospital, state)
}
data.frame(hospital, state)
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("pneumonia", "worst")
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
r <- rankall("heart failure", 09)
as.character(subset(r, state == "NV")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
rankall <- function(outcome, num = "best") {
#state = "TX"
#outcome = "pneumonia"
#num = 10
## read data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome are valid
outcomes <- c("heart attack", "heart failure", "pneumonia")
## For each state, find the hospital of the given rank
state <- levels(factor(data[, 7]))
hospital <- vector(mode="character")
for (i in seq(state)) {
hospital[i] <- rankhospital(state[i], outcome, num)
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
allbest <- data.frame(hospital, state)
allbest
}
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
allbest <- r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
View(allbest)
rankall <- function(outcome, num = "best") {
#state = "TX"
#outcome = "pneumonia"
#num = 10
## read data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome are valid
outcomes <- c("heart attack", "heart failure", "pneumonia")
## For each state, find the hospital of the given rank
state <- levels(factor(data[, 7]))
hospital <- vector(mode="character")
for (i in seq(state)) {
hospital[i] <- rankhospital(state[i], outcome, num)
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
data.frame(hospital, state)
}
allbest <- r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
View(allbest)
View(allbest)
View(allbest)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
View(r)
View(r)
tail(rankall("heart failure"), 10)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
View(r)
r <- rankall("pneumonia", "worst")
View(r)
View(allbest)
rankall <- function(outcome, num = "best") {
## read data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome are valid
outcomes <- c("heart attack", "heart failure", "pneumonia")
## For each state, find the hospital of the given rank
state <- levels(factor(data[, 7]))
hospital <- vector(mode="character")
for (i in seq(state)) {
hospital[i] <- rankhospital(state[i], outcome, num)
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
data.frame(hospital, state)
}
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
source("rankall.R")
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
source("rankhospital.R")
source("best.R")
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
View(r)
rankhospital("NJ", "pneumonia", "worst")
rankhospital("TX", "pneumonia", 10)
fileurl <- "https://data.baltimorecity.gov/Public-Safety/CCTV-Cameras/y3f4-umna#download"
download.file(fileurl, destfile = "cameras.csv", method = "curl")
library(readr)
cameras <- read_csv("cameras.csv")
View(cameras)
